/*Singly Linked List implementation*/

#include<iostream>
using namespace std;

struct Node{
	int data;
	Node *next;
};

class SLL{
	Node *head;
	public:
		SLL(){
			head = NULL;
		}
		
		void insert(int val){
			Node *nn = new Node;
			nn -> data = val;
			nn -> next = NULL;
			if(head == NULL)
				head = nn;
			else{
				Node *temp = head;
				while(temp -> next)
					temp = temp -> next;
				temp -> next = nn;
			}
			return;
			
		}
		
		void removeAData(int val){
			Node *temp = head;
			Node *prev = NULL;
			if(head == NULL){
				cout << "Empty list!" << endl;
				return;
			}
			if(head -> data == val){
				head = head -> next;
				delete temp;
			}
			temp = head;//temp should point to new head
			while(temp){
				if(temp -> data == val){
					prev -> next = temp -> next;
					delete temp;
					temp = temp -> next;
				}
				else{
				    prev = temp;
				    temp = temp -> next;
				}
			}
			return;
		}
		
		void printRecords(){
			Node *temp = head;
			while(temp){
				cout << temp -> data << "\t";
				temp = temp -> next;
			}
			cout << endl;
			return;
		}
		void searchAData(int val){
			Node *temp = head;
			while(temp){
				if(temp -> data == val){
					cout << temp -> data << endl;
					return;
				}
				else
					temp = temp -> next;
			}
			cout << val << " NOT FOUND!" << endl;
			return;
		}
		
		
};
	
int main(){
	SLL myList;
	myList.insert(10);
	myList.insert(20);
	myList.insert(30);
	myList.insert(10);
	cout << "Insertion Done!"<< endl;
	myList.printRecords();
	myList.searchAData(90);
	myList.searchAData(10);
	myList.removeAData(10);
	cout << "After deletion!" << endl;
	myList.printRecords();
	return 0;
}

