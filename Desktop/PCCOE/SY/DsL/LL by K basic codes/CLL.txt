#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *next;
};

class cll {
    Node *tail;

public:
    cll() {
        tail = NULL;
    }

    void insert(int val) {
        Node *nn = new Node;
        nn->data = val;
        if (tail == NULL) {
            // When the list is empty, the new node should point to itself
            tail = nn;
            nn->next = nn;
        } else {
            // Insert the new node into the circular linked list
            nn->next = tail->next; // New node points to the head
            tail->next = nn;       // Tail points to the new node
            tail = nn;             // Update the tail
        }
    }

    void printRecords() {
        if (tail == NULL) {
            cout << "List is empty!" << endl;
            return;
        }
        Node *temp = tail->next; // Start from head
        do {
            cout << temp->data << "\t";
            temp = temp->next;
        } while (temp != tail->next);
        cout << endl;
    }

    void deleteNode(int val) {
        if (tail == NULL) {
            cout << "Empty list" << endl;
            return;
        }

        Node *temp = tail->next; 
        Node *prev = tail;
        bool found = false; 

        do {
            if (temp->data == val) {
                prev->next = temp->next;
                found = true; 
                Node *curr = temp; 
                if (temp == tail) {
                    tail = prev; 
                }
                temp = temp->next;
                delete curr;
                cout << "Node with value " << val << " deleted." << endl;
            } 
            else {
                prev = temp; 
                temp = temp->next; 
            }
        } 
        while (temp != tail->next);

        if (!found) {
            cout << "Node with value " << val << " not found." << endl;
        }
    }

    void search(int val) {
        if (tail == NULL) {
            cout << "List is empty!" << endl;
            return;
        }

        Node *temp = tail->next; // Start from head
        do {
            if (temp->data == val) {
                cout << "Node with value " << val << " found." << endl;
                return;
            }
            temp = temp->next;
        } while (temp != tail->next);

        cout << "Node with value " << val << " not found." << endl;
    }
};

int main() {
    cll mylist;
    mylist.insert(8);
    mylist.insert(10);
    mylist.insert(9);
    mylist.insert(10); // Inserting duplicate for testing
    mylist.insert(12);
    
    cout << "Initial list: ";
    mylist.printRecords();
    
    mylist.deleteNode(10); // This should delete both occurrences of 10
    mylist.deleteNode(12);
    mylist.deleteNode(8);
    
    cout << "After deletions: ";
    mylist.printRecords(); // Should indicate the list is empty
    
    return 0;
}
